package RecurionAndBacktracking.Recursion.MixedProblems;

import java.util.ArrayList;

/*
You are given a string 'STR' containing lowercase English letters from a to z inclusive.
Your task is to find all non-empty possible subsequences of 'STR'.

A Subsequence of a string is the one which is generated by deleting 0 or more letters from the
string and keeping the rest of the letters in the same order.

Problem link: https://www.codingninjas.com/codestudio/guided-paths/data-structures-algorithms/content/118522/offering/1380932?leftPanelTab=0
Solution link: https://www.youtube.com/watch?v=AxNNVECce8c&list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9&index=6

 */

public class PrintSubSequences {

    public static ArrayList<String> subsequences(String str) {
        ArrayList<String> ans = new ArrayList<>();
        String s = "";
        solveSubSequence(ans,0,s,str);
        return ans;

    }

    public static void solveSubSequence(ArrayList<String> ans, int i, String s, String str){
        if(i==str.length()){
            if(s.length()>0)
                ans.add(s);
            return;
        }

        //This is the not take case for each index
        solveSubSequence(ans,i+1,s,str);

        // Below is the take case for each index
        s = s + str.charAt(i);
        solveSubSequence(ans,i+1,s,str);

    }
}
